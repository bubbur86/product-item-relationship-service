apiVersion: apps/v1
kind: Deployment
metadata:
  name: { { include "edcprovider.fullname" . } }
  labels:
    { { - include "edcprovider.labels" . | nindent 4 } }
spec:
  { { - if not .Values.autoscaling.enabled } }
  replicas: { { .Values.replicaCount } }
  { { - end } }
  selector:
    matchLabels:
      { { - include "edcprovider.selectorLabels" . | nindent 6 } }
  template:
    metadata:
      { { - with .Values.podAnnotations } }
      annotations:
        { { - toYaml . | nindent 8 } }
      { { - end } }
      labels:
        { { - include "edcprovider.selectorLabels" . | nindent 8 } }
    spec:
      { { - with .Values.imagePullSecrets } }
      imagePullSecrets:
        { { - toYaml . | nindent 8 } }
      { { - end } }
      serviceAccountName: { { include "edcprovider.serviceAccountName" . } }
      securityContext:
        { { - toYaml .Values.podSecurityContext | nindent 8 } }
      containers:
        - name: { { .Chart.Name } }
          securityContext:
            { { - toYaml .Values.securityContext | nindent 12 } }
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: { { .Values.image.pullPolicy } }
          ports:
            - name: default
              containerPort: { { .Values.edcprovider.default.port } }
              protocol: TCP
            - name: public
              containerPort: { { .Values.edcprovider.public.port } }
              protocol: TCP
            - name: control
              containerPort: { { .Values.edcprovider.control.port } }
              protocol: TCP
            - name: metrics
              containerPort: { { .Values.edcprovider.metrics.port } }
              protocol: TCP
          { { - if .Values.livenessProbe.enabled } }
          livenessProbe:
            httpGet:
              path: { { .Values.edcprovider.default.path } }/check/liveness
              port: default
          { { - end } }
          { { - if .Values.readinessProbe.enabled } }
          readinessProbe:
            httpGet:
              path: { { .Values.edcprovider.default.path } }/check/readiness
              port: default
          { { - end } }
          { { - if .Values.startupProbe.enabled } }
          startupProbe:
            httpGet:
              path: { { .Values.edcprovider.default.path } }/check/startup
              port: default
            failureThreshold: 12
            initialDelaySeconds: 10
          { { - end } }
          envFrom:
            - configMapRef:
                name: { { include "edc-dataplane.fullname" . } }-env
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: configuration
              mountPath: /app/configuration.properties
              subPath: configuration.properties
            - name: configuration
              mountPath: /app/opentelemetry.properties
              subPath: opentelemetry.properties
            - name: configuration
              mountPath: /app/logging.properties
              subPath: logging.properties
      volumes:
        - name: configuration
          configMap:
            name: { { include "edc-dataplane.fullname" . } }-configmap
            items:
                - key: configuration.properties
                  path: configuration.properties
                    - key: opentelemetry.properties
                      path: opentelemetry.properties
                    - key: logging.properties
                      path: logging.properties
      { { - with .Values.nodeSelector } }
      nodeSelector:
        { { - toYaml . | nindent 8 } }
      { { - end } }
      { { - with .Values.affinity } }
      affinity:
        { { - toYaml . | nindent 8 } }
      { { - end } }
      { { - with .Values.tolerations } }
      tolerations:
        { { - toYaml . | nindent 8 } }
      { { - end } }
